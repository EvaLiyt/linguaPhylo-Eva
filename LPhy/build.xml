<project default="build" basedir="." name="lphy" >

    <!-- TODO Java 16 not available in GitHub Action -->
    <property name="sourceVersion" value="15"/>
    <property name="targetVersion" value="15"/>

    <!--*******************************************************************-->

    <!-- Ant build fails if the repo dir isn't named linguaPhylo/LPhy -->
    <property name="projName" value="LPhy"/>
    <!-- source code dir separated from test   -->
    <property name="src" location="../${projName}/src" />
    <!-- source code dir of test   -->
    <property name="lib" location="../${projName}/lib" />
    <property name="resources" location="../${projName}/resources" />
    <property name="test" location="../${projName}/test" />
    <!-- Names of temporary build/test directories, which are deleted before build -->
    <property name="build" location="../${projName}/build" />
    <property name="dist" location="../${projName}/dist" />
    <property name="build-test" location="../${projName}/build-test"/>
    <property name="test-reports" location="../${projName}/test-reports"/>

    <!--  linguaPhylo/doc  -->
    <property name="doc" value="../doc" />


    <!--*******************************************************************-->

    <xmlproperty file="../pom.xml" collapseAttributes="true"/>
    <property name="projVersion" value="${project.version}"/>
    <!-- need 3rd party jar to use script engine, to convert the string to lower cases -->
    <!-- Jar file naming conventions: all small cases  name-major.minor.build.jar  -->
    <property name="jarFileName" value="lphy-${projVersion}"/>
    <!--   ${user.name}    -->
    <property name="builtBy" value="Walter Xie"/>

    <!-- Revert to pristine state. -->
    <target name="clean">
        <delete dir="${build}"/>
        <delete dir="${dist}"/>
        <delete dir="${build-test}"/>
        <delete dir="${test-reports}"/>
    </target>

    <!-- Prepare for compilation -->
    <target name="init" depends="clean">
        <echo message="Java version: ${java.version}"/>
        <echo message="${ant.project.name}: ${ant.file}" />
        <echo message="Working dir is ${projName}." />

        <mkdir dir="${build}"/>
        <mkdir dir="${dist}"/>
    </target>

    <path id="lphy-classpath">
        <pathelement path="${classpath}"/>
        <pathelement path="${build}"/>
        <pathelement path="${resources}"/>
        <fileset dir="${lib}" includes="*.jar"/>
    </path>

    <!-- Compile -->
    <target name="compile" depends="init" description="clean, create dirs, and compile.">
        <echo>LPhy classpath is ${toString:lphy-classpath}</echo>

        <javac target="${targetVersion}" source="${sourceVersion}"
               srcdir="${src}" destdir="${build}" includeantruntime="false">
            <classpath refid="lphy-classpath"/>
        </javac>
        <mkdir dir="${build}/META-INF"/>
        <mkdir dir="${build}/META-INF/services"/>
        <copy file="${resources}/META-INF/services/lphy.spi.LPhyExtension" todir="${build}/META-INF/services"/>
        <echo message="Successfully compiled ${projName}." />
    </target>

    <!-- jar -->
    <target name="dist" depends="compile">
        <echo>name=${project.groupId}, version=${project.version}</echo>
<!--    <echo>depends=${dependencies.dependency.groupId}, version=${dependencies.dependency.version}</echo>-->

        <mkdir dir="${dist}"/>
        <tstamp/>

        <jar jarfile="${dist}/${jarFileName}.jar">
            <fileset dir="${build}"/>
            <manifest>
<!--                <attribute name="Main-Class" value="lphy.app.LinguaPhyloStudio"/>-->
                <attribute name="Version" value="${projVersion}"/>
                <attribute name="Class-Path" value="${jarFileName}.jar"/>
                <attribute name="Created-By" value="${project.groupId} team"/>
                <attribute name="Built-By" value="${builtBy}"/>
                <attribute name="Built-Date" value="${TODAY}"/>
            </manifest>
            <zipgroupfileset dir="${lib}" includes="*.jar"/>
        </jar>
    </target>

    <target name="generate-docs" description="generate Lphy docs.">
        <echo> Generate Lphy docs to ${user.dir}/${doc} ... </echo>
        <java classname="lphy.doc.GenerateDocs" dir="${doc}" args="${projVersion}" fork="true">
            <classpath refid="lphy-classpath"/>
        </java>
    </target>


    <!-- Prepare for unit test compilation -->
    <target name="init-test">
        <echo message="Java version: ${java.version}"/>
        <echo message="${ant.project.name}: ${ant.file}"/>
        <echo message="Working dir is ${projName}." />

        <mkdir dir="${build-test}"/>
        <mkdir dir="${test-reports}"/>
    </target>

    <path id="junit-classpath">
        <pathelement path="${classpath}"/>
        <pathelement path="${build}"/>
        <pathelement path="${build-test}"/>
        <fileset dir="${lib}" includes="*.jar"/>
    </path>

    <!-- Require to compile main code before this -->
    <target name="compile-test" depends="init-test" description="only compile unit tests">
        <javac target="${targetVersion}" source="${sourceVersion}" srcdir="${test}"
               destdir="${build-test}" includeantruntime="false">
            <classpath refid="junit-classpath"/>
        </javac>
        <echo message="Successfully compiled ${projName} tests." />
    </target>


    <!-- another pipeline parallel with dist -->
    <target name="test" depends="compile, compile-test"
            description="run unit tests including compile main code">
        <echo>LPhy test classpath is ${toString:junit-classpath}</echo>

        <junit printsummary="yes" failureproperty="testFailed">
            <classpath refid="junit-classpath"/>
            <batchtest fork="yes" todir="${test-reports}">
                <fileset dir="${test}">
                    <include name="**/*Test.java"/>
                </fileset>
                <formatter type="plain"/>
            </batchtest>
        </junit>

        <fail if="testFailed" status="1" message="Unit test of ${projName} failed."/>
    </target>

    <target name="build" depends="compile"/>

    <!--  https://docs.github.com/en/actions  -->
    <target name="github-actions" depends="build, compile-test, test">
        <fail if="testFailed" message="One or more ${projName} tests failed."/>
    </target>

</project>
