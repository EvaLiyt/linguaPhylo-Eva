<project default="github-actions" basedir="." name="lphy" >

    <property name="sourceVersion" value="16"/>
    <property name="targetVersion" value="16"/>

    <!--*******************************************************************-->

    <property name="lphyFolder" value="LPhy"/>
    <!-- this is for studio build -->
    <!-- overwrite lphyRepo in other extensions build -->
    <property name="lphyRepo" value=".."/>
    <!-- source code dir separated from test   -->
    <property name="lphySrc" location="${lphyRepo}/${lphyFolder}/src" />
    <!-- source code dir of test   -->
    <property name="lphyLib" location="${lphyRepo}/${lphyFolder}/lib" />
    <property name="lphyTest" location="${lphyRepo}/${lphyFolder}/test" />
    <!-- Names of temporary build/test directories, which are deleted before build -->
    <property name="lphyBuild" location="${lphyRepo}/${lphyFolder}/build" />
    <property name="lphyDist" location="${lphyRepo}/${lphyFolder}/dist" />
    <property name="lphy-build-test" location="${lphyRepo}/${lphyFolder}/build-test"/>
    <property name="lphy-test-reports" location="${lphyRepo}/${lphyFolder}/test-reports"/>

    <!--  only for non-module  -->
    <property name="lphyResources" location="${lphyRepo}/${lphyFolder}/resources" />

    <!--  linguaPhylo/LPhy/doc  -->
    <property name="lphyDoc" value="${lphyRepo}/${lphyFolder}/doc" />

    <!--*******************************************************************-->

    <xmlproperty file="${lphyRepo}/pom.xml" collapseAttributes="true"/>
    <property name="lphyVersion" value="${project.version}"/>
    <!-- need 3rd party jar to use script engine, to convert the string to lower cases -->
    <!-- Jar file naming conventions: all small cases  name-major.minor.build.jar  -->
    <property name="lphyJar" value="lphy-${lphyVersion}"/>
    <!--   ${user.name}    -->
    <property name="builtBy" value="Walter Xie"/>
    <property name="createBy" value="${project.groupId} team"/>

    <!--*******************************************************************-->

    <!-- Revert to pristine state. -->
    <target name="clean">
        <delete dir="${lphyBuild}"/>
        <delete dir="${lphyDist}"/>
        <delete dir="${lphy-build-test}"/>
        <delete dir="${lphy-test-reports}"/>
    </target>

    <!-- Prepare for compilation -->
    <target name="init" depends="clean">
        <echo message="Java version: ${java.version}"/>
        <echo message="${ant.project.name}: ${ant.file}" />
        <echo message="Working dir is ${user.dir}." />
        <echo message="Current dir is ${basedir}." />
        <echo message="LPhy repo folder is ${lphyRepo}." />
        <echo message="LPhy doc folder is ${lphyDoc}." />

        <mkdir dir="${lphyBuild}"/>
<!--        <mkdir dir="${lphyDist}"/>-->
    </target>

    <!--****** Java module system ******-->

    <path id="lphy-module-path">
        <pathelement path="${lphyBuild}"/>
        <fileset dir="${lphyLib}" includes="*.jar"/>
    </path>

    <!-- Compile -->
    <target name="compile" depends="init" description="clean, create dirs, and compile.">
        <echo>LPhy module-path is ${toString:lphy-module-path}</echo>

        <javac target="${targetVersion}" source="${sourceVersion}"
               srcdir="${lphySrc}" destdir="${lphyBuild}" includeantruntime="false">
        <!-- p or module-path : Specify where to find application modules -->
            <modulepath refid="lphy-module-path"/>
        </javac>
        <echo message="Successfully compiled ${lphyRepo}." />
    </target>

    <!-- jar -->
    <target name="dist" depends="compile">
        <!-- manifest -->
        <tstamp/>
        <echo message="Version ${lphyVersion}" />
        <echo message="Class-Path ${lphyJar}.jar" />
        <echo message="Created-By ${createBy}" />
        <echo message="Built-By ${builtBy}" />
        <echo message="Built-Date ${TODAY}" />

        <!--    <echo>depends=${dependencies.dependency.groupId}, version=${dependencies.dependency.version}</echo>-->

        <mkdir dir="${lphyDist}"/>

        <!-- TODO multi-release jar (MR jar) ?  -->
<!--        <exec executable="jar" failifexecutionfails="true">-->
<!--            <arg value="&#45;&#45;verbose" />-->
<!--            <arg value="&#45;&#45;create" />-->
<!--            <arg value="&#45;&#45;file=${lphyDist}/${lphyJar}.jar" />-->
<!--            <arg value="&#45;&#45;release" />-->
<!--            <arg value="9" />-->
<!--            <arg value="-C" />-->
<!--            <arg value="${lphyBuild}" />-->
<!--            <arg value="." />-->
<!--        </exec>-->

        <jar jarfile="${lphyDist}/${lphyJar}.jar">
            <fileset dir="${lphyBuild}"/>
            <manifest>
                <attribute name="Version" value="${lphyVersion}"/>
<!--                <attribute name="Class-Path" value="${lphyJar}.jar"/>-->
                <attribute name="Created-By" value="${createBy}"/>
                <attribute name="Built-By" value="${builtBy}"/>
                <attribute name="Built-Date" value="${TODAY}"/>
            </manifest>
<!--            <zipgroupfileset dir="${lphyLib}" includes="*.jar"/>-->
        </jar>

        <echo message="Successfully create ${lphyJar}." />
    </target>

    <target name="generate-docs" description="generate Lphy docs.">
        <echo> Generate Lphy docs to ${lphyDoc} ... </echo>
        <java module="lphy" classname="lphy.doc.GenerateDocs" dir="${lphyDoc}" args="${lphyVersion}" fork="true">
            <modulepath refid="lphy-module-path"/>
        </java>
    </target>

    <!-- Java 8 using classpath  -->
    <path id="j8-classpath">
        <pathelement path="${classpath}"/>
        <fileset dir="${lphyLib}" includes="*.jar" excludes="**/module-info.java"/>
    </path>

    <!--****** Non-module Jar ******-->

    <!-- Compile -->
    <target name="compile-j8" depends="init" >
        <echo>LPhy Java 8 classpath is ${toString:j8-classpath}</echo>

        <javac target="${targetVersion}" source="${sourceVersion}" destdir="${lphyBuild}"
               includeantruntime="false" debug="on" failonerror="yes">
            <!-- assume every classes are inside lphy package to exclude module-info.java -->
            <!-- every options else are not working, e.g. <exclude name= -->
            <src path="${lphySrc}/lphy"/>
<!--            <exclude name="**/module-info.java"/>-->
            <classpath refid="j8-classpath"/>
        </javac>
        <mkdir dir="${lphyBuild}/META-INF"/>
        <mkdir dir="${lphyBuild}/META-INF/services"/>
        <copy file="${lphyResources}/META-INF/services/lphy.spi.LPhyExtension" todir="${lphyBuild}/META-INF/services"/>
        <echo message="Successfully compiled ${lphyRepo} using classpath." />
    </target>

    <!-- jar -->
    <property name="lphyJ8Jar" value="lphy-j8-${lphyVersion}"/>

    <target name="dist-j8" depends="compile-j8"
            description="Non-module Jar using META-INF services to invoke SPI.">
        <!-- manifest -->
        <tstamp/>
        <echo message="Version ${lphyVersion}" />
        <echo message="Class-Path ${lphyJ8Jar}.jar" />
        <echo message="Created-By ${createBy}" />
        <echo message="Built-By ${builtBy}" />
        <echo message="Built-Date ${TODAY}" />

        <mkdir dir="${lphyDist}"/>
        <!-- zipgroupfileset cannot exclude file  -->
        <mkdir dir="${lphyDist}/lib"/>
        <!-- jebl3 has module-info.class -->
        <property name="jeblJar" value="jebl-3.0.0.jar"/>
        <copy todir="${lphyDist}/lib">
            <fileset dir="${lphyLib}" excludes="${jeblJar}"/>
        </copy>

        <jar jarfile="${lphyDist}/${lphyJ8Jar}.jar">
            <fileset dir="${lphyBuild}" excludes="**/module-info.class"/>
            <manifest>
                <attribute name="Version" value="${lphyVersion}"/>
                <attribute name="Class-Path" value="${lphyJ8Jar}.jar"/>
                <attribute name="Created-By" value="${createBy}"/>
                <attribute name="Built-By" value="${builtBy}"/>
                <attribute name="Built-Date" value="${TODAY}"/>
            </manifest>

            <!-- exclude jebl3 -->
            <zipgroupfileset dir="${lphyDist}/lib" includes="*.jar"/>
            <!-- add jebl3 from lib-->
            <zipfileset src="${lphyLib}/${jeblJar}" excludes="module-info.class"/>
        </jar>
        <!-- clean dist -->
        <delete dir="${lphyDist}/lib"/>

        <echo message="Successfully create ${lphyJ8Jar}." />
    </target>

    <!--****** github-actions ******-->

    <!-- Prepare for unit test compilation -->
    <target name="init-test">
        <echo message="Java version: ${java.version}"/>
        <echo message="${ant.project.name}: ${ant.file}"/>
        <echo message="Working dir is ${user.dir}." />
        <echo message="Current dir is ${basedir}." />

        <mkdir dir="${lphy-build-test}"/>
        <mkdir dir="${lphy-test-reports}"/>
    </target>

    <!-- TODO patch-module not working, have to use classpath now -->
    <path id="junit-classpath">
        <pathelement path="${classpath}"/>
        <pathelement path="${lphyBuild}"/>
        <pathelement path="${lphy-build-test}"/>
        <fileset dir="${lphyLib}" includes="*.jar"/>
    </path>

    <!-- Require to compile main code before this -->
    <target name="compile-test" depends="init-test" description="only compile unit tests">
        <javac target="${targetVersion}" source="${sourceVersion}" srcdir="${lphyTest}"
               destdir="${lphy-build-test}" includeantruntime="false">
            <classpath refid="junit-classpath"/>
        </javac>
        <echo message="Successfully compiled ${lphyFolder} tests." />
    </target>


    <!-- another pipeline parallel with dist -->
    <target name="test" depends="compile-j8, compile-test"
            description="run unit tests including compile main code">
        <echo>LPhy test classpath is ${toString:junit-classpath}</echo>

        <junit printsummary="on" failureproperty="testFailed">
            <classpath refid="junit-classpath"/>
            <batchtest todir="${lphy-test-reports}">
                <fileset dir="${lphyTest}">
                    <include name="**/*Test.java"/>
                </fileset>
                <formatter type="xml"/>
            </batchtest>
        </junit>

        <fail if="testFailed" status="1" message="Unit test of ${lphyFolder} failed."/>
    </target>

    <!--  https://docs.github.com/en/actions  -->
    <target name="github-actions" depends="test">
        <fail if="testFailed" message="One or more ${lphyFolder} tests failed."/>
    </target>

</project>
