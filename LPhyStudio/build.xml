<project default="compile" basedir="." name="studio" >

    <!--*******************************************************************-->

    <!-- build fails if the path isn't ../../linguaPhylo/LPhyStudio -->
    <property name="studioFolder" value="LPhyStudio"/>

    <property name="lphy" location="../LPhy"/>
    <include file="${lphy}/build.xml"/>
<!--    <echo>${lphyJar}</echo>-->
<!--    <echo>${projVersion}</echo>-->

    <!-- source code dir separated from test   -->
    <property name="studioSrc" location="${lphyRepo}/${studioFolder}/src" />
    <!-- source code dir of test   -->
    <!--    <property name="studioLib" location="${lphyRepo}/${studioFolder}/lib" />-->
    <property name="studioTest" location="${lphyRepo}/${studioFolder}/test" />
    <!-- Names of temporary build/test directories, which are deleted before build -->
    <property name="studioBuild" location="${lphyRepo}/${studioFolder}/build" />
    <property name="studioDist" location="${lphyRepo}/${studioFolder}/dist" />
    <property name="studio-build-test" location="${lphyRepo}/${studioFolder}/build-test"/>
    <property name="studio-test-reports" location="${lphyRepo}/${studioFolder}/test-reports"/>

    <!-- need 3rd party jar to use script engine, to convert the string to lower cases -->
    <!-- Jar file naming conventions: all small cases  name-major.minor.build.jar  -->
    <property name="studioJar" value="lphy-studio-${lphyVersion}"/>

    <!-- Revert to pristine state. -->
    <target name="clean">
        <delete dir="${studioBuild}"/>
        <delete dir="${studioDist}"/>
        <delete dir="${studio-build-test}"/>
        <delete dir="${studio-test-reports}"/>
    </target>

    <!-- Prepare for compilation -->
    <target name="init" depends="clean">
        <echo message="Java version: ${java.version}"/>
        <echo message="${ant.project.name}: ${ant.file}" />
        <echo message="Working dir is ${user.dir}." />
        <echo message="Current dir is ${basedir}." />

        <mkdir dir="${studioBuild}"/>
<!--        <mkdir dir="${dist}"/>-->
        <!--  lphy.dist is called in release  -->
    </target>

    <path id="studio-module-path">
        <pathelement path="${studioBuild}"/>
        <pathelement path="${lphyBuild}"/>
        <fileset dir="${lphyLib}" includes="*.jar"/>
    </path>

    <!-- Compile -->
    <target name="compile" depends="init" description="clean, create dirs, and compile.">
        <echo>LPhy studio module-path is ${toString:studio-module-path}</echo>
        <!-- imported from ${lphy}/build.xml -->
        <javac target="${targetVersion}" source="${sourceVersion}" srcdir="${studioSrc}"
               destdir="${studioBuild}" includeantruntime="false">
            <modulepath refid="studio-module-path"/>
        </javac>
        <echo message="Successfully compiled ${studioFolder}." />
    </target>

    <property name="extDir" value="lib"/>
    <!-- jar -->

    <target name="dist" depends="compile">

        <mkdir dir="${studioDist}"/>

        <exec executable="jar" failifexecutionfails="true">
            <arg value="--verbose" />
            <arg value="--create" />
            <arg value="--file=${studioDist}/${studioJar}.jar" />
            <arg value="--main-class=lphystudio.app.LinguaPhyloStudio" />
            <!-- multi-release jar not working  -->
<!--            <arg value="&#45;&#45;release" />-->
<!--            <arg value="9" />-->
            <arg value="-C" />
            <arg value="${studioBuild}" />
            <arg value="." />
        </exec>
        <!-- TODO manifest -->
        <echo message="Create ${studioJar}.jar to ${studioDist}." />
        
    </target>

    <!-- 1. update version number in pom.xml and LinguaPhyloStudio -->
    <!-- 2. run GenerateDocs [ version number ] -->
    <!-- 3. commit all changes -->
    <!-- 4. ant release : create LPhyStudio-?.?.?.zip -->
    <!-- 5. upload it to github release page -->
    <target name="release" depends="lphy.dist,compile,dist" unless="file.exists"
            description="for the release process">
        <!-- release, depend on lphy.dist -->
        <property name="pack" value="${studioDist}/package"/>
        <mkdir dir="${pack}"/>
        <mkdir dir="${pack}/${extDir}"/>

        <copy file="${studioDist}/${studioJar}.jar" tofile="${pack}/${studioJar}.jar"/>
        <available property="file.exists" file="${lphyDist}/${lphyJar}.jar"/>
        <!--  lphy core to ext as well  -->
        <copy file="${lphyDist}/${lphyJar}.jar" todir="${pack}/${extDir}"/>
        <copy todir="${pack}/${extDir}">
            <fileset dir="${lphyLib}" includes="*.jar"/>
        </copy>

        <copy file="../README.md" todir="${pack}"/>
        <!--
            <copy file="COPYING" todir="${pack}" />
            <copy todir="${pack}">
              <fileset dir="${lib}" includes="LICENSE*" />
            </copy>
        -->
        <property name="exmpDir" value="examples"/>
        <mkdir dir="${pack}/${exmpDir}"/>
        <copy todir="${pack}/${exmpDir}">
            <!--  examples files are under the root -->
            <fileset dir="../${exmpDir}" includes="*.lphy">
                <!-- not ready -->
                <exclude name="**/*covid*"/>
            </fileset>
            <fileset dir="../${exmpDir}">
                <include name="**/*.nex"/>
                <include name="**/*.nexus"/>
                <include name="**/*.fasta"/>
                <!-- not ready -->
                <exclude name="**/*covid*"/>
            </fileset>
        </copy>
        <property name="tutDir" value="tutorials"/>
        <mkdir dir="${pack}/${tutDir}"/>
        <copy todir="${pack}/${tutDir}">
            <!--  tutorials files are underCodeBuilder the root -->
            <fileset dir="../${tutDir}">
                <!-- add new tutorial here -->
                <include name="h3n2.lphy"/>
                <include name="h5n1.lphy"/>
                <include name="hcv_coal.lphy"/>
                <include name="hcv_coal_classic.lphy"/>
                <include name="RSV2.lphy"/>
                <include name="RSV2sim.lphy"/>
            </fileset>
            <fileset dir="../${tutDir}">
                <include name="**/*.nex"/>
                <include name="**/*.nexus"/>
                <include name="**/*.fasta"/>
            </fileset>
        </copy>

        <zip destfile="${studioDist}/${studioFolder}-${lphyVersion}.zip" basedir="${pack}"/>

<!--        <delete dir="${pack}"/>-->

        <echo/>
        <echo/>
        <echo>** Release ${studioDist}/${studioFolder}-${lphyVersion}.zip created successfully! **</echo>
    </target>

<!--TODO tests-->

</project>
