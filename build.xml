<project default="build" basedir=".">

  <!-- CONFIGURATION: Source, JUnit test code and jar library locations. -->
<!--  <property name="test" location="test"/>-->
  <property name="lphy" location="lphy"/>
  <property name="lphybe" location="lphybeast"/>

  <!-- TODO java 11 bug to create corrupted zip  -->
  <property name="sourceVersion" value="11"/>
  <property name="targetVersion" value="11"/>
  <property name="beastSrcRevision" value="master"/>
  <!--*******************************************************************-->

  <!-- Names of temporary build/test directories -->
  <property name="build" location="build"/>
  <property name="build-test" location="build-test"/>
  <property name="test-reports" location="test-reports"/>
  <property name="dist" location="dist"/>

  <property name="lphyName" value="lphy"/>
  <property name="lphybeName" value="lphybeast"/>
  <property name="projName" value="LinguaPhylo" />
  <property name="projVersion" value="0.0.1" />

  <!-- Prepare for compilation -->
  <target name="init">
    <mkdir dir="${build}"/>
<!--    <mkdir dir="${build-lib}"/>-->
    <mkdir dir="${dist}"/>
<!--    <copy todir="${build-lib}">-->
<!--      <fileset dir="${lphy}/lib" includes="*.jar"/>-->
<!--      <fileset dir="${lphybe}/lib" includes="*.jar"/>-->
<!--    </copy>-->
  </target>

  <!-- Compile -->
  <target name="compile" depends="compile-l,compile-lb"/>

  <target name="compile-l" depends="init">
    <javac target="${targetVersion}" source="${sourceVersion}" srcdir="${lphy}/src" destdir="${build}" includeantruntime="false">
      <classpath>
        <pathelement path="${.}"/>
        <fileset dir="${lphy}/lib" includes="*.jar"/>
      </classpath>
    </javac>
  </target>

  <target name="compile-lb" depends="init">
    <javac target="${targetVersion}" source="${sourceVersion}" srcdir="${lphybe}/src" destdir="${build}" includeantruntime="false">
      <classpath>
        <pathelement path="${classpath}"/>
        <fileset dir="${lphy}/lib" includes="*.jar"/>
        <fileset dir="${lphybe}/lib" includes="*.jar"/>
      </classpath>
    </javac>
  </target>

  <!-- Release -->
  <property name="pack" value="${dist}/package"/>

  <target name="dist-lphy" depends="compile-l">
    <mkdir dir="${pack}"/>
    <jar jarfile="${pack}/${lphyName}.src.jar" >
      <fileset dir="${lphy}/src"/>
    </jar>

    <jar jarfile="${pack}/${lphyName}.v${projVersion}.jar">
      <fileset dir="${build}" includes="${lphyName}/**"/>
      <manifest>
        <attribute name="Main-Class" value="lphy.app.LinguaPhyloStudio"/>
      </manifest>
      <zipgroupfileset dir="${lphy}/lib" includes="*.jar" />
    </jar>
  </target>

  <target name="dist-lphybe" depends="compile-lb">
    <mkdir dir="${pack}"/>
    <jar jarfile="${pack}/${lphybeName}.src.jar" >
      <fileset dir="${lphybe}/src"/>
    </jar>

    <!-- lphybeast depends on lphy -->
    <jar jarfile="${pack}/${lphybeName}.v${projVersion}.jar">
      <fileset dir="${build}"/>
      <!-- TODO main in dev -->
      <manifest>
        <attribute name="Main-Class" value="lphybeast.LPhyBEAST"/>
      </manifest>
      <zipgroupfileset dir="${lphy}/lib" includes="*.jar" />
      <zipgroupfileset dir="${lphybe}/lib" includes="*.jar" />
    </jar>
  </target>

  <!-- TODO now 1 zip contains both lphy and lphybeast -->
  <target name="dist" depends="build,dist-lphy,dist-lphybe">
    <property name="packageName" value="${projName}.v${projVersion}"/>
    <mkdir dir="${pack}"/>

    <!-- 2 jars from dist-*  -->

    <copy file="README.md" tofile="${pack}/README" />
<!--
    <copy file="COPYING" todir="${pack}" />
    <copy todir="${pack}">
      <fileset dir="${lib}" includes="LICENSE*" />
    </copy>
-->
    <mkdir dir="${pack}/examples" />
    <!-- TODO why 2 examples ? -->
    <copy todir="${pack}/examples">
      <fileset dir="${lphy}/examples" includes="*.lphy" />
    </copy>

    <zip destfile="${dist}/${packageName}.zip" basedir="${pack}" />

<!--    <delete dir="${pack}"/>-->

    <echo/>
    <echo/>
    <echo>** Package ${dist}/${packageName}.zip created successfuly! **</echo>
  </target>



  <target name="build" depends="clean, compile"/>
  
  <!-- Prepare for unit test compilation -->
  <target name="init-test">
    <mkdir dir="${build-test}"/>
    <mkdir dir="${test-reports}"/>
    <echo message="Java ${java.version}" />
  </target>


  <!-- Compile unit tests -->
  <target name="compile-test-l" depends="init-test,compile">
    <javac target="${targetVersion}" source="${sourceVersion}" srcdir="${lphy}/test" destdir="${build-test}" includeantruntime="false">
      <classpath>
        <pathelement path="${classpath}"/>
        <pathelement path="${build}"/>
        <fileset dir="${lphy}/lib" includes="*.jar"/>
      </classpath>
    </javac>
  </target>


  <!-- Run unit tests -->
  <target name="test" depends="compile-test-l">
    <junit printsummary="yes" failureproperty="testFailed">
      <classpath>
        <pathelement path="${classpath}"/>
        <pathelement path="${build}"/>
        <pathelement path="${build-test}"/>
        <fileset dir="${lphy}/lib" includes="*.jar"/>
      </classpath>
      <batchtest fork="yes" todir="${test-reports}">
        <fileset dir="${lphy}/test">
          <include name="**/*Test.java"/>
        </fileset>
        <formatter type="plain"/>
      </batchtest>
    </junit>

    <fail if="testFailed" status="1" message="Unit test failed."/>
  </target>



  <!-- Revert to pristine state. -->
  <target name="clean">
    <delete dir="${build}" />
    <delete dir="${dist}" />
    <delete dir="${build-test}" />
    <delete dir="${test-reports}" />
  </target>


    <target name="travis" depends="clean, compile, test">
        <fail if="testFailed" message="One or more graphicalModelSimulation tests failed."/>
	</target>

</project>
